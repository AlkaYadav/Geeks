/*
 * sortKSortedArray.cpp
 *
 *  Created on: Sep 14, 2015
 *      Author: user
 */

//Sort a nearly sorted (or K sorted) array
#include<iostream>
#include<limits.h>
#include<algorithm>
#include<vector>
#include<stack>
#include<map>
#include<functional>
using namespace std;

void printVector(vector<int> heap){
	cout<<endl<<"Vector is "<<endl;
	for(int i=0;i<heap.size();i++){
		cout<<heap[i]<<" ";
	}
	cout<<endl;
}
void sortedK(int arr[],int n,int k){

	int i=k+1;
	cout<<"In min heap "<<endl;
	vector<int> heap(arr,arr+k+1);
	cout<<"Before printing vector is "<<endl;
	printVector(heap);
	make_heap(heap.begin(),heap.end(),greater<int>());
	cout<<"Initial max heap is "<<heap.front()<<endl;
	//pop_heap(heap.begin(),heap.end());
	//heap.pop_back();
	cout<<"Max heap after pop_back "<<heap.front()<<endl;
	heap.push_back(arr[i]);
	push_heap(heap.begin(),heap.end(),greater<int>());
	cout<<"Max heap after push_back "<<heap.front()<<endl;
	sort_heap(heap.begin(),heap.end());


	printVector(heap);

}
void sortKSortedArray(int arr[],int n,int k){
	vector<int> v(arr,arr+k+1);
	make_heap(v.begin(),v.end());
	cout<<"Initial "<<v.front()<<endl;
	sort_heap(v.begin(),v.end());
	for(int i=k+1;i<n;i++){
		cout<<"Front is "<<v.front()<<endl;
		pop_heap(v.begin(),v.end(),greater<int>());
		v.pop_back();
		v.push_back(arr[i]);
		push_heap(v.begin(),v.end(),greater<int>());
		sort_heap(v.begin(),v.end());
	}

	cout << "Following is sorted array\n";
	for(int i=0;i<n;i++){
		cout<<arr[i]<<" ";
	}
	cout<<endl;
}


int main()
{
    int k = 3;
    int arr[] = {2, 6, 3, 12, 56, 8};
    int n = sizeof(arr)/sizeof(arr[0]);
    //sortKSortedArray(arr, n, k);

    sortedK(arr,n,k);
   // printArray (arr, n);

    return 0;
}
