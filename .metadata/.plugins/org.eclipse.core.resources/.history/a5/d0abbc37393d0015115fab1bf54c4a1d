
/*
 * BinaryTreeGeeks.h
 *
 *  Created on: Aug 6, 2015
 *      Author: user
 */

#ifndef BINARYTREEGEEKS_H_
#define BINARYTREEGEEKS_H_
#include<iostream>
#include<queue>
#include<stack>
using namespace std;

class SinglyLinkedNode{
	SinglyLinkedNode* next;
	int data;
	friend class LinkedListToCompleteBinaryTree;
};

class BinaryTreeNode{
	BinaryTreeNode *left;
	BinaryTreeNode *right;
	int data;

	friend class LinkedListToCompleteBinaryTree;
};

class LinkedListToCompleteBinaryTree{
	SinglyLinkedNode* head;
	BinaryTreeNode* root;
	//queue<BinaryTreeNode*> q;
	BinaryTreeNode* linkedListToCompleteBinaryTree(SinglyLinkedNode* head);
	SinglyLinkedNode* insertLinked(int data);
	BinaryTreeNode * insert(int newdata);
	void inorderHelper(BinaryTreeNode *);
	void insertCompleteBinaryTreeHelper(queue<BinaryTreeNode*> &q,int data);
	int LISSHelper(BinaryTreeNode* root);
	void convertBinaryTreeToDoublyHelper(BinaryTreeNode* root,BinaryTreeNode** head);
	void printList(BinaryTreeNode* head);

	void fixLeftPtr(BinaryTreeNode* root,BinaryTreeNode** head);
	void fixRightPtr(BinaryTreeNode* root);
	BinaryTreeNode* convertBinaryTreeToDoublySet1(BinaryTreeNode* root);
	BinaryTreeNode* findLCA(int n1,int n2);
	bool findPath(BinaryTreeNode* root,int node1);
	BinaryTreeNode* findLCAHelper(BinaryTreeNode* root,int n1,int n2,bool &b1,bool &b2);
	int findDistHelper(BinaryTreeNode* root,int node,int dist);
	BinaryTreeNode* findDistLCAHelper(BinaryTreeNode* root,int n1,int n2,int& d1,int& d2,int& dist,int lvl);
	void sumHelper(BinaryTreeNode* root,int &sum,int digit);

	BinaryTreeNode* removeAllPathsSumLessThanKHelper(BinaryTreeNode* root,int* sum,int k);
	BinaryTreeNode* removeAllPathsSumLessThanKHelper2(BinaryTreeNode* root,int k);
	int diffHelper(BinaryTreeNode* root);
	void depthLeftLeafHelper(BinaryTreeNode* root,int lvl,int *maxlvl,bool isLeft);
	bool checkLeavesLevelHelper(BinaryTreeNode* root,int lvl,int *samelevel);

public:
	LinkedListToCompleteBinaryTree();
	void insertRandomLinkedList();
	BinaryTreeNode* linkedListToCompleteBinaryTree();
	void insertCompleteBinaryTree();
	int LISS();
	void convertBinaryTreeToDoubly();
	void convertBinaryTreeToDoublySet2();
	void convertBinaryTreeToDoublySet1();
	void LCAPrint(int n1,int n2);
	int findDist(int n1,int n2);
	void findSum();
	void removeAllPathsSumLessThanK(int k);
	void printAncestorsWithoutRecursion(int key);
	int diff();
	void depthLeftLeaf();
	bool checkLeavesLevel();
};

#endif /* BINARYTREEGEEKS_H_ */
